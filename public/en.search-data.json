{"/blog/":{"data":{"":"THis is"},"title":"Getting started"},"/docs/":{"data":{"":"üëã Hello! Welcome to the learn DSC documentation course!\nThis website was created to help beginners advance their skills in the new Desired State Configuration (DSC) version 3. DSC has been totally rewritten in Rust, and our primary aim is to provide comprehensive guidance and resources to make the transition smooth and effective. Whether you are new to DSC or looking to upgrade your knowledge, you‚Äôll find valuable information and tutorials here."},"title":"Introduction"},"/docs/basic/":{"data":{"":"Explore the following sections to learn how to use Hextra:\nOrganize Files\rConfiguration\rMarkdown\rSyntax Highlighting\rLaTeX\rDiagrams\rShortcodes\rDeploy Site"},"title":"The Basics"},"/docs/basic/level-1-basic-concepts/":{"data":{"":"","add-images#Add Images":"Directory Structure By default, Hugo searches for Markdown files in the content directory, and the structure of the directory determines the final output structure of your website. Take this site as an example:\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md Each of the _index.md files is the index page for the corresponding section. The other Markdown files are regular pages.\ncontent\r‚îú‚îÄ‚îÄ _index.md // \u003c- /\r‚îú‚îÄ‚îÄ docs\r‚îÇ ‚îú‚îÄ‚îÄ _index.md // \u003c- /docs/\r‚îÇ ‚îú‚îÄ‚îÄ getting-started.md // \u003c- /docs/getting-started/\r‚îÇ ‚îî‚îÄ‚îÄ guide\r‚îÇ ‚îú‚îÄ‚îÄ _index.md // \u003c- /docs/guide/\r‚îÇ ‚îî‚îÄ‚îÄ organize-files.md // \u003c- /docs/guide/organize-files/\r‚îî‚îÄ‚îÄ blog\r‚îú‚îÄ‚îÄ _index.md // \u003c- /blog/\r‚îî‚îÄ‚îÄ post-1.md // \u003c- /blog/post-1/ Layouts Hextra offers three layouts for different content types:\nLayout Directory Features docs content/docs/ Ideal for structured documentation, same as this section. blog content/blog/ For blog postings, with both listing and detailed article views. default All other directories Single-page article view without sidebar. To customize a section to mirror the behavior of a built-in layout, specify the desired type in the front matter of the section‚Äôs _index.md.\ncontent/my-docs/_index.md--- title: My Docs cascade: type: docs --- The above example configuration ensures that the content files inside content/my-docs/ will be treated as documentation (docs type) by default.\nSidebar Navigation The sidebar navigation is generated automatically based on the content organization alphabetically. To manually configure the sidebar order, we can use the weight parameter in the front matter of the Markdown files.\ncontent/docs/guide/_index.md--- title: Guide weight: 2 --- ‚ÑπÔ∏è It is recommended to keep the sidebar not too deep. If you have a lot of content, consider splitting them into multiple sections. Breadcrumb Navigation Breadcrumbs are auto-generated based on the directory structure of /content.\nFor example, consider the file structure demonstrated above. Given that structure, the breadcrumbs atop the page at /docs/guide/organize-files/ would appear automatically as follows:\nDocumentation \u003e Guide \u003e Organize Files Customizing Breadcrumb Link Titles By default, each breadcrumb link is generated based on that page‚Äôs title parameter. You can customize this by specifying a linkTitle.\nFor example, if instead of Organize Files we wanted the breadcrumb to be Foo Bar:\ncontent/docs/guide/organize-files.md--- linkTitle: Foo Bar title: Organize Files --- This would now generate the following breadcrumbs:\nDocumentation \u003e Guide \u003e Foo Bar Hiding Breadcrumbs You can hide breadcrumbs completely from a page by specifying breadcrumbs: false in its front matter:\ncontent/docs/guide/organize-files.md--- breadcrumbs: false title: Organize Files --- Configure Content Directory By default, the root content/ directory is used by Hugo to build the site. If you need to use a different directory for content, for example docs/, this can be done by setting the contentDir parameter in the site configuration hugo.yaml.\nAdd Images To add images, the easiest way is to put the image files in the same directory as the Markdown file. For example, add an image file image.png alongside the my-page.md file:\ncontent docs my-page.md image.png Then, we can use the following Markdown syntax to add the image to the content:\ncontent/docs/my-page.md![](image.png) We can also utilize the page bundles feature of Hugo to organize the image files together with the Markdown file. To achieve that, turn the my-page.md file into a directory my-page and put the content into a file named index.md, and put the image files inside the my-page directory:\ncontent docs my-page index.md image.png content/docs/my-page/index.md![](image.png) Alternatively, we can also put the image files in the static directory, which will make the images available for all pages:\nstatic images image.png content docs my-page.md Note that the image path begins with a slash / and is relative to the static directory:\ncontent/docs/my-page.md![](/images/image.png) ","breadcrumb-navigation#Breadcrumb Navigation":"","configure-content-directory#Configure Content Directory":"","directory-structure#Directory Structure":"","layouts#Layouts":"","sidebar-navigation#Sidebar Navigation":""},"title":"Level 1: The Basics"},"/docs/getting-started/":{"data":{"":"","next#Next":"Quick Start from Template imfing/hextra-starter-template\nYou could quickly get started by using the above template repository.\nWe have provided a GitHub Actions workflow which can help automatically build and deploy your site to GitHub Pages, and host it for free. For more options, check out Deploy Site.\nüåê Demo ‚Üó\nStart as New Project There are two main ways to add the Hextra theme to your Hugo project:\nHugo Modules (Recommended): The simplest and recommended method. Hugo modules let you pull in the theme directly from its online source. Theme is downloaded automatically and managed by Hugo.\nGit Submodule: Alternatively, add Hextra as a Git Submodule. The theme is downloaded by Git and stored in your project‚Äôs themes folder.\nSetup Hextra as Hugo module Prerequisites Before starting, you need to have the following software installed:\nHugo (extended version) Git Go Steps Initialize a new Hugo site hugo new site my-site --format=yaml Configure Hextra theme via module # initialize hugo module cd my-site hugo mod init github.com/username/my-site # add Hextra theme hugo mod get github.com/imfing/hextra Configure hugo.yaml to use Hextra theme by adding the following:\nmodule: imports: - path: github.com/imfing/hextra Create your first content pages Create new content page for the home page and the documentation page:\nhugo new content/_index.md hugo new content/docs/_index.md Preview the site locally hugo server --buildDrafts --disableFastRender Voila, your new site preview is available at http://localhost:1313/.\nSetup Hextra as Git submodule Prerequisites Before starting, you need to have the following software installed:\nHugo (extended version) Git Steps Initialize a new Hugo site hugo new site my-site --format=yaml Add Hextra theme as a Git submodule git submodule add https://github.com/imfing/hextra.git themes/hextra Configure hugo.yaml to use Hextra theme by adding the following:\ntheme: hextra Create your first content pages Create new content page for the home page and the documentation page:\nhugo new content/_index.md hugo new content/docs/_index.md Preview the site locally hugo server --buildDrafts --disableFastRender Your new site preview is available at http://localhost:1313/.\nWhen using CI/CD for Hugo website deployment, it‚Äôs essential to ensure that the following command is executed before running the hugo command.\ngit submodule update --init Failure to run this command results in the theme folder not being populated with Hextra theme files, leading to a build failure.\nNext Explore the following sections to start adding more contents:\nOrganize Files\rConfiguration\rMarkdown","quick-start-from-template#Quick Start from Template":"","start-as-new-project#Start as New Project":""},"title":"Getting Started"}}